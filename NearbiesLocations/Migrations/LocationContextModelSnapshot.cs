// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NearbiesLocations.Data;

#nullable disable

namespace NearbiesLocations.Migrations
{
    [DbContext(typeof(LocationContext))]
    partial class LocationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NearbiesLocations.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NearbiesLocations.Models.FavoriteLocation", b =>
                {
                    b.Property<int>("FavoriteLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteLocationID"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteLocationID");

                    b.HasIndex("LocationID");

                    b.HasIndex("UserID");

                    b.ToTable("FavoriteLocations");
                });

            modelBuilder.Entity("NearbiesLocations.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExternalID")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(17,15)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(17,15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LocationID");

                    b.HasIndex("ExternalID")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("NearbiesLocations.Models.LocationCategory", b =>
                {
                    b.Property<int>("LocationCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationCategoryID"), 1L, 1);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.HasKey("LocationCategoryID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("LocationID");

                    b.ToTable("LocationCategory");
                });

            modelBuilder.Entity("NearbiesLocations.Models.RequestResponse", b =>
                {
                    b.Property<int>("RequestResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestResponseID"), 1L, 1);

                    b.Property<string>("LocationsIDs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SearchRequestID")
                        .HasColumnType("int");

                    b.HasKey("RequestResponseID");

                    b.HasIndex("SearchRequestID");

                    b.ToTable("RequestResponses");
                });

            modelBuilder.Entity("NearbiesLocations.Models.SearchRequest", b =>
                {
                    b.Property<int>("SearchRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchRequestID"), 1L, 1);

                    b.Property<int?>("CategoryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal?>("Latitude")
                        .IsRequired()
                        .HasColumnType("decimal(17,15)");

                    b.Property<decimal?>("Longitude")
                        .IsRequired()
                        .HasColumnType("decimal(17,15)");

                    b.Property<DateTime>("SearchTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SearchRequestID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("SearchRequests");
                });

            modelBuilder.Entity("NearbiesLocations.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.HasIndex("ApiKey")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NearbiesLocations.Models.FavoriteLocation", b =>
                {
                    b.HasOne("NearbiesLocations.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NearbiesLocations.Models.User", "User")
                        .WithMany("FavouriteLocations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NearbiesLocations.Models.LocationCategory", b =>
                {
                    b.HasOne("NearbiesLocations.Models.Category", "Category")
                        .WithMany("LocationCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NearbiesLocations.Models.Location", "Location")
                        .WithMany("LocationCategories")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("NearbiesLocations.Models.RequestResponse", b =>
                {
                    b.HasOne("NearbiesLocations.Models.SearchRequest", "SearchRequest")
                        .WithMany("RequestResponse")
                        .HasForeignKey("SearchRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchRequest");
                });

            modelBuilder.Entity("NearbiesLocations.Models.SearchRequest", b =>
                {
                    b.HasOne("NearbiesLocations.Models.Category", "Category")
                        .WithMany("SearchRequests")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NearbiesLocations.Models.User", "User")
                        .WithMany("SearchRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NearbiesLocations.Models.Category", b =>
                {
                    b.Navigation("LocationCategories");

                    b.Navigation("SearchRequests");
                });

            modelBuilder.Entity("NearbiesLocations.Models.Location", b =>
                {
                    b.Navigation("LocationCategories");
                });

            modelBuilder.Entity("NearbiesLocations.Models.SearchRequest", b =>
                {
                    b.Navigation("RequestResponse");
                });

            modelBuilder.Entity("NearbiesLocations.Models.User", b =>
                {
                    b.Navigation("FavouriteLocations");

                    b.Navigation("SearchRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
